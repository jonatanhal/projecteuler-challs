/*

The sequence of triangle numbers is generated by adding the natural
numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7
= 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

     1: 1
     3: 1,3
     6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five
divisors.

What is the value of the first triangle number to have over five
hundred divisors?

*/

package main

import (
	"fmt"
	 "math"
)

func triangleNumber(index uint64) (sum uint64) {
	for i := uint64(1); i <= index; i++ { sum += i }
	return
}

func factor(n uint64, f chan int) {
	for ff := uint64(2) ; ff < uint64(math.Sqrt(float64(n))) ; {
		if n % ff == 0 {
			f <- int(ff)
		}
		ff++
	}
	close(f)
}

func in(haystack []int, needle int) bool {
	for i := range haystack {
		if needle == haystack[i] {
			return true
		}
	}
	return false
}

func main() {
	g := 101
	for {
		g++
		factors := []int{}
		n := triangleNumber(uint64(g))
		fmt.Printf("\n)triangle(g:%d)->n:%d\n",g,n)
		f := make(chan int)
		go factor(n,f)
		for {
			ff, more := <-f
			if more {
				fmt.Printf("%d ",ff)
				factors = append(factors, ff)
			} else {
				if len(factors) >= 500 {
					fmt.Printf("\nWinner: triangle(%d)->%d\nFactors: %#v\n",g,n,factors)
					return
				}
				break
			}
		}
	}
}
